apply plugin: 'com.android.application'
def homePath = System.properties['user.home']

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.ichi2.apisample"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 20
        versionName "1.8.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file("${homePath}/src/android-keystore")
            keyAlias "nrkeystorealias"
            storePassword "ENTER_PASSWORD"
            keyPassword "ENTER_PASSWORD"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    useLibrary 'android.test.mock'
}

configurations {
    driver
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.ichi2.anki:api:1.1.0alpha6'
    implementation 'commons-io:commons-io:2.4'
    implementation "androidx.preference:preference:1.1.1"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    testImplementation 'org.mockito:mockito-core:3.10.0'
    androidTestImplementation 'org.mockito:mockito-core:3.10.0'
    androidTestImplementation 'org.mockito:mockito-android:3.10.0'
    driver 'org.xerial:sqlite-jdbc:3.34.0'
}


import groovy.json.JsonSlurper
import groovy.sql.Sql

import javax.xml.namespace.QName
import java.util.zip.ZipInputStream

task buildModelResource {
    def source = new File(rootDir.getPath() + "/Selected Notes.apkg")

    def dbFileName = "collection.anki2"
    def dbFilePath = rootDir.getPath() + "/" + dbFileName

    def fileInputStream = new FileInputStream(source)
    def zipInputStream = new ZipInputStream(fileInputStream)
    def zipEntry
    while ((zipEntry = zipInputStream.getNextEntry()) != null) {
        if (zipEntry.getName().equals(dbFileName)) {
            def fileOutputStream = new FileOutputStream(dbFilePath)
            for (int c = zipInputStream.read(); c != -1; c = zipInputStream.read()) {
                fileOutputStream.write(c)
            }
            zipInputStream.closeEntry()
            fileOutputStream.close()
        }
    }
    zipInputStream.close()

    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.driver.each { File file -> loader.addURL(file.toURI().toURL()) }

    def resFilePath = projectDir.getPath() + '/src/main/res/values/model.xml'

    def sql = Sql.newInstance('jdbc:sqlite:' + dbFilePath, '', '', 'org.sqlite.JDBC')
    def screen = { s -> s.replace('"', '\\"').replace("'", "\\'") }
    def fillStringArray = { root, name, arr ->
        def node = root.find { it.'@name' == name }
        node.value = ""
        arr.each {
            node.appendNode(new QName('item'), [:], it)
        }
    }
    def result = sql.firstRow('SELECT models FROM col')
    def resultParsed = new JsonSlurper().parseText(result.models)

    def modelId = "1600189815815"
    def model = resultParsed[modelId]

    def fields = []
    def cardNames = []
    def qfmt = []
    def afmt = []

    model.flds.each { fld ->
        fields << fld.name
    }
    model.tmpls.each { tmpl ->
        cardNames << screen(tmpl.name)
        qfmt << screen(tmpl.qfmt)
        afmt << screen(tmpl.afmt)
    }
    def css = model.css

    def res = new XmlParser().parse(new File(resFilePath))
    def elements = res.children()

    elements.find { it.'@name' == "css" }.value = css
    fillStringArray(elements, 'fields', fields)
    fillStringArray(elements, 'card_names', cardNames)
    fillStringArray(elements, 'qfmt', qfmt)
    fillStringArray(elements, 'afmt', afmt)

    new XmlNodePrinter(new PrintWriter(new FileWriter(new File(resFilePath)))).print(res)
    sql.close()
    new File(dbFilePath).delete()
}
